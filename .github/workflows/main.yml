- name: Send Data to Supabase
  env:
    SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
    SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  run: |
    echo '::group::Enviando dados ao Supabase'

    # Captura as variÃ¡veis (inclusive arrays) como strings
    PR_NUMBER=${{ steps.pr_info.outputs.pr_number }}
    PR_TITLE="${{ steps.pr_info.outputs.pr_title }}"
    PR_STATUS="${{ steps.pr_info.outputs.pr_status }}"
    DEVELOPER_NAME="${{ steps.pr_info.outputs.developer_name }}"
    DEVELOPER_EMAIL="${{ steps.pr_info.outputs.developer_email }}"
    CREATED_AT="${{ steps.pr_info.outputs.created_at }}"
    MERGED_AT="${{ steps.pr_info.outputs.merged_at }}"
    AI_TOOLS_RAW='${{ steps.pr_info.outputs.ai_tools }}'
    REPOSITORY="${{ steps.pr_info.outputs.repository }}"

    # Monta e envia o JSON
    jq -n \
      --arg pr_number "$PR_NUMBER" \
      --arg pr_title "$PR_TITLE" \
      --arg pr_status "$PR_STATUS" \
      --arg developer_name "$DEVELOPER_NAME" \
      --arg developer_email "$DEVELOPER_EMAIL" \
      --arg created_at "$CREATED_AT" \
      --arg merged_at "$MERGED_AT" \
      --arg repository "$REPOSITORY" \
      --argjson ai_tools "$AI_TOOLS_RAW" \
      '{
        pr_number: ($pr_number | tonumber),
        pr_title: $pr_title,
        pr_status: $pr_status,
        developer_name: $developer_name,
        developer_email: $developer_email,
        created_at: $created_at,
        merged_at: ($merged_at == "" or $merged_at == "null" ? null : $merged_at),
        ai_tools: $ai_tools,
        repository: $repository
      }' > payload.json

    cat payload.json

    curl -X POST \
      "${SUPABASE_URL}/rest/v1/pr_metrics" \
      -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
      -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
      -H "Content-Type: application/json" \
      -H "Prefer: return=representation" \
      -d @payload.json

    echo '::endgroup::'
