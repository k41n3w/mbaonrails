name: PR AI Usage Metrics

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

jobs:
  send_metrics:
    runs-on: ubuntu-latest

    steps:
      - name: Extraindo informações do PR
        id: pr_info
        run: |
          echo '::group::Extraindo informações do PR'

          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_STATUS="${{ github.event.pull_request.state }}"
          DEV_NAME="${{ github.event.pull_request.user.login }}"
          CREATED_AT="${{ github.event.pull_request.created_at }}"
          MERGED_AT="${{ github.event.pull_request.merged_at }}"
          REPO_NAME="${{ github.repository }}"
          DEV_EMAIL="unknown@example.com"

          TIME_SAVED_PERCENTAGE="20%"
          TIME_SAVED_REASON="Usando o Copilot, consegui acelerar a escrita do código."
          IA_USAGE_MODE="Autocomplete"
          IA_USAGE_FREQUENCY="Cerca de metade do tempo"
          IA_USAGE_INVESTMENT="Resolver vulnerabilidades"

          if echo "$PR_BODY" | grep -q '\- \[x\] Copilot'; then
            IA_TOOL_USED="Copilot"
          elif echo "$PR_BODY" | grep -q '\- \[x\] Cursor'; then
            IA_TOOL_USED="Cursor"
          elif echo "$PR_BODY" | grep -q '\- \[x\] Devin'; then
            IA_TOOL_USED="Devin"
          elif echo "$PR_BODY" | grep -q '\- \[x\] Nenhuma'; then
            IA_TOOL_USED="Nenhuma"
          elif echo "$PR_BODY" | grep -q '\- \[x\] Outra'; then
            IA_TOOL_USED=$(echo "$PR_BODY" | grep '\- \[x\] Outra' | sed -E 's/.*Outra \(qual\)?:\s*//')
          else
            IA_TOOL_USED="not_informed"
          fi

          # Linhas adicionadas/removidas
          PR_FILES_URL="https://api.github.com/repos/${REPO_NAME}/pulls/${PR_NUMBER}/files"
          PR_FILES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$PR_FILES_URL")
          ADDED_LINES=$(echo "$PR_FILES_JSON" | jq '[.[] | .additions] | add // 0')
          REMOVED_LINES=$(echo "$PR_FILES_JSON" | jq '[.[] | .deletions] | add // 0')

          # Primeiro commit
          PR_COMMITS_URL="https://api.github.com/repos/${REPO_NAME}/pulls/${PR_NUMBER}/commits"
          FIRST_COMMIT_DATE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$PR_COMMITS_URL" | jq -r '.[0].commit.committer.date')

          # Normalizando valores
          if [[ -z "$MERGED_AT" || "$MERGED_AT" == "null" ]]; then
            MERGED_AT_JSON="null"
          else
            MERGED_AT_JSON="\"$MERGED_AT\""
          fi

          if [[ -z "$FIRST_COMMIT_DATE" || "$FIRST_COMMIT_DATE" == "null" ]]; then
            FIRST_COMMIT_DATE_JSON="null"
          else
            FIRST_COMMIT_DATE_JSON="\"$FIRST_COMMIT_DATE\""
          fi

          echo "$PR_BODY" > body.txt

          echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV
          echo "pr_title=$PR_TITLE" >> $GITHUB_ENV
          echo "pr_status=$PR_STATUS" >> $GITHUB_ENV
          echo "developer_name=$DEV_NAME" >> $GITHUB_ENV
          echo "developer_email=$DEV_EMAIL" >> $GITHUB_ENV
          echo "created_at=$CREATED_AT" >> $GITHUB_ENV
          echo "merged_at_json=$MERGED_AT_JSON" >> $GITHUB_ENV
          echo "ia_tool_used=$IA_TOOL_USED" >> $GITHUB_ENV
          echo "time_saved_percentage=$TIME_SAVED_PERCENTAGE" >> $GITHUB_ENV
          echo "time_saved_reason=$TIME_SAVED_REASON" >> $GITHUB_ENV
          echo "ia_usage_mode=$IA_USAGE_MODE" >> $GITHUB_ENV
          echo "ia_usage_frequency=$IA_USAGE_FREQUENCY" >> $GITHUB_ENV
          echo "ia_usage_investment=$IA_USAGE_INVESTMENT" >> $GITHUB_ENV
          echo "added_lines=$ADDED_LINES" >> $GITHUB_ENV
          echo "removed_lines=$REMOVED_LINES" >> $GITHUB_ENV
          echo "repository=$REPO_NAME" >> $GITHUB_ENV
          echo "first_commit_date_json=$FIRST_COMMIT_DATE_JSON" >> $GITHUB_ENV

          echo '::endgroup::'

      - name: Enviando dados ao Supabase
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo '::group::Enviando dados ao Supabase'

          jq -n \
            --arg pr_number "$pr_number" \
            --arg pr_title "$pr_title" \
            --slurpfile pr_body body.txt \
            --arg pr_status "$pr_status" \
            --arg developer_name "$developer_name" \
            --arg developer_email "$developer_email" \
            --arg created_at "$created_at" \
            --arg ia_tool_used "$ia_tool_used" \
            --arg time_saved_percentage "$time_saved_percentage" \
            --arg time_saved_reason "$time_saved_reason" \
            --arg ia_usage_mode "$ia_usage_mode" \
            --arg ia_usage_frequency "$ia_usage_frequency" \
            --arg ia_usage_investment "$ia_usage_investment" \
            --arg added_lines "$added_lines" \
            --arg removed_lines "$removed_lines" \
            --arg repository "$repository" \
            --arg merged_at "$merged_at_json" \
            --arg first_commit_date "$first_commit_date_json" \
            '{
              pr_number: ($pr_number | tonumber),
              pr_title: $pr_title,
              pr_body: $pr_body[0],
              pr_status: $pr_status,
              developer_name: $developer_name,
              developer_email: $developer_email,
              created_at: $created_at,
              merged_at: ($merged_at | fromjson),
              ia_tool_used: $ia_tool_used,
              time_saved_percentage: $time_saved_percentage,
              time_saved_reason: $time_saved_reason,
              ia_usage_mode: $ia_usage_mode,
              ia_usage_frequency: $ia_usage_frequency,
              ia_usage_investment: $ia_usage_investment,
              added_lines: ($added_lines | tonumber),
              removed_lines: ($removed_lines | tonumber),
              repository: $repository,
              first_commit_date: ($first_commit_date | fromjson)
            }' > payload.json

          cat payload.json

          curl -X POST \
            "$SUPABASE_URL/rest/v1/pr_metrics_v2?on_conflict=repository,pr_number" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=representation,resolution=merge-duplicates" \
            -d @payload.json

          echo '::endgroup::'
