name: PR AI Usage Metrics

on:
  pull_request:
    types: [closed, labeled]

jobs:
  send_metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Extract PR Info and Labels
        id: pr_info
        run: |
          echo '::group::Extraindo informações do PR'

          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_STATUS="${{ github.event.pull_request.state }}"
          DEV_NAME="${{ github.event.pull_request.user.login }}"
          CREATED_AT="${{ github.event.pull_request.created_at }}"
          MERGED_AT="${{ github.event.pull_request.merged_at }}"
          REPO_NAME="${{ github.repository }}"
          DEV_EMAIL="unknown@example.com"

          LABELS_JSON='${{ toJson(github.event.pull_request.labels) }}'
          AI_TOOLS=$(echo "$LABELS_JSON" | jq -r '[.[] | select(.name=="Copilot" or .name=="Cursor" or .name=="Devin" or .name=="Não usei IA") | .name]')
          ESCAPED_AI_TOOLS=$(echo "$AI_TOOLS" | jq -c .)

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_status=$PR_STATUS" >> $GITHUB_OUTPUT
          echo "developer_name=$DEV_NAME" >> $GITHUB_OUTPUT
          echo "developer_email=$DEV_EMAIL" >> $GITHUB_OUTPUT
          echo "created_at=$CREATED_AT" >> $GITHUB_OUTPUT
          echo "merged_at=$MERGED_AT" >> $GITHUB_OUTPUT
          echo "ai_tools=$ESCAPED_AI_TOOLS" >> $GITHUB_OUTPUT
          echo "repository=$REPO_NAME" >> $GITHUB_OUTPUT

          echo '::endgroup::'

      - name: Send Data to Supabase
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo '::group::Enviando dados ao Supabase'

          PR_NUMBER=${{ steps.pr_info.outputs.pr_number }}
          PR_TITLE="${{ steps.pr_info.outputs.pr_title }}"
          PR_STATUS="${{ steps.pr_info.outputs.pr_status }}"
          DEVELOPER_NAME="${{ steps.pr_info.outputs.developer_name }}"
          DEVELOPER_EMAIL="${{ steps.pr_info.outputs.developer_email }}"
          CREATED_AT="${{ steps.pr_info.outputs.created_at }}"
          MERGED_AT="${{ steps.pr_info.outputs.merged_at }}"
          AI_TOOLS_RAW='${{ steps.pr_info.outputs.ai_tools }}'
          REPOSITORY="${{ steps.pr_info.outputs.repository }}"

          jq -n \
            --arg pr_number "$PR_NUMBER" \
            --arg pr_title "$PR_TITLE" \
            --arg pr_status "$PR_STATUS" \
            --arg developer_name "$DEVELOPER_NAME" \
            --arg developer_email "$DEVELOPER_EMAIL" \
            --arg created_at "$CREATED_AT" \
            --arg merged_at "$MERGED_AT" \
            --arg repository "$REPOSITORY" \
            --argjson ai_tools "$AI_TOOLS_RAW" \
            '{
              pr_number: ($pr_number | tonumber),
              pr_title: $pr_title,
              pr_status: $pr_status,
              developer_name: $developer_name,
              developer_email: $developer_email,
              created_at: $created_at,
              merged_at: ($merged_at == "" or $merged_at == "null" ? null : $merged_at),
              ai_tools: $ai_tools,
              repository: $repository
            }' > payload.json

          cat payload.json

          curl -X POST \
            "${SUPABASE_URL}/rest/v1/pr_metrics" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=representation" \
            -d @payload.json

          echo '::endgroup::'
