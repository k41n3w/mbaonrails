name: Enviar métricas de PR com IA

on:
  pull_request:
    types: [opened, reopened, synchronize, closed, labeled, unlabeled]

jobs:
  enviar-metricas:
    runs-on: ubuntu-latest

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extrair informações do PR
        id: extrair
        shell: bash
        run: |
          set -Eeuo pipefail
          echo '::group::Extraindo informações do PR'

          pr_number="${{ github.event.pull_request.number }}"
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body || '' }}"
          pr_status="${{ github.event.pull_request.state }}"
          created_at="${{ github.event.pull_request.created_at }}"
          merged_at="${{ github.event.pull_request.merged_at }}"
          repository="${{ github.repository }}"
          developer_name="${{ github.actor }}"
          developer_email="unknown@example.com"

          # Ferramenta de IA
          shopt -s nocasematch
          if echo "$pr_body" | grep -iqP '\-\s*\[x\]\s*Copilot'; then ia_tool_used="Copilot"
          elif echo "$pr_body" | grep -iqP '\-\s*\[x\]\s*Cursor'; then ia_tool_used="Cursor"
          elif echo "$pr_body" | grep -iqP '\-\s*\[x\]\s*Devin'; then ia_tool_used="Devin"
          elif echo "$pr_body" | grep -iqP '\-\s*\[x\]\s*Nenhuma'; then ia_tool_used="Nenhuma"
          elif echo "$pr_body" | grep -iqP '\-\s*\[x\]\s*Outra'; then
            ia_tool_used=$(echo "$pr_body" | grep -iP '\-\s*\[x\]\s*Outra' | sed -E 's/.*Outra[^:]*:\s*//I')
            [[ -z "$ia_tool_used" ]] && ia_tool_used="Outra"
          else ia_tool_used="not_informed"; fi
          shopt -u nocasematch

          # Cenários de uso
          declare -A map=(
            ["Geração de código boilerplate"]="boilerplate"
            ["Explicação de trechos de código"]="explain_code"
            ["Sugestões de melhorias/refatoração"]="refactor_suggestions"
          )
          scenarios=(); for p in "${!map[@]}"; do
            if echo "$pr_body" | grep -iqP "\-\s*\[x\]\s*$p"; then scenarios+=("${map[$p]}"); fi; done
          ia_usage_scenarios=$(IFS=','; echo "${scenarios[*]}"); [[ -z "$ia_usage_scenarios" ]] && ia_usage_scenarios="none"

          # Nota de produtividade (0-10)
          productivity_score=$(echo "$pr_body" | grep -oP '(?<=\*\*Produtividade \(0-10\):\*\*:?\s*)(\*\*__)?\s*\K[0-9]{1,2}' | head -1 || true)
          if [[ -z "$productivity_score" || "$productivity_score" -gt 10 ]]; then
            productivity_score="null"
          fi

          # Justificativa da nota
          productivity_reason=$(echo "$pr_body" | awk '
            BEGIN{flag=0}
            /### *[Jj]ustificativa da nota/{flag=1; next}
            /^---/{flag=0}
            flag {gsub(/^[> ]+/,"",$0); if($0!="") printf "%s ",$0}
          ' | sed 's/  */ /g; s/"/\\"/g' | xargs)

          # Linhas adicionadas/removidas
          pr_files_url="https://api.github.com/repos/${repository}/pulls/${pr_number}/files"
          pr_files_json=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$pr_files_url")
          added_lines=$(echo "$pr_files_json" | jq '[.[] | .additions] | add // 0')
          removed_lines=$(echo "$pr_files_json" | jq '[.[] | .deletions] | add // 0')

          # Data do primeiro commit
          pr_commits_url="https://api.github.com/repos/${repository}/pulls/${pr_number}/commits"
          first_commit_date=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$pr_commits_url" | jq -r '.[0].commit.committer.date // empty')

          printf '%s' "$pr_body" | jq -Rs '.' > body.txt

          merged_at_json="${merged_at:-null}"; [[ "$merged_at_json" != "null" ]] && merged_at_json="\"$merged_at_json\""
          first_commit_date_json="${first_commit_date:-null}"; [[ "$first_commit_date_json" != "null" ]] && first_commit_date_json="\"$first_commit_date_json\""

          # Exporta variáveis para o próximo passo
          {
            echo "pr_number=$pr_number"
            echo "pr_title=$pr_title"
            echo "pr_status=$pr_status"
            echo "developer_name=$developer_name"
            echo "developer_email=$developer_email"
            echo "created_at=$created_at"
            echo "merged_at_json=$merged_at_json"
            echo "ia_tool_used=$ia_tool_used"
            echo "ia_usage_scenarios=$ia_usage_scenarios"
            echo "productivity_score=$productivity_score"
            echo "productivity_reason=$productivity_reason"
            echo "added_lines=$added_lines"
            echo "removed_lines=$removed_lines"
            echo "repository=$repository"
            echo "first_commit_date_json=$first_commit_date_json"
          } >> "$GITHUB_ENV"

          echo '::endgroup::'

      - name: Enviar dados ao Supabase
        shell: bash
        run: |
          set -Eeuo pipefail
          echo '::group::Enviando dados ao Supabase'

          if [[ "$productivity_score" == "null" ]]; then
            jq_productivity_score="null"
          else
            jq_productivity_score="$productivity_score"
          fi

          jq -n \
            --arg pr_number "$pr_number" \
            --arg pr_title "$pr_title" \
            --slurpfile pr_body body.txt \
            --arg pr_status "$pr_status" \
            --arg developer_name "$developer_name" \
            --arg developer_email "$developer_email" \
            --arg created_at "$created_at" \
            --arg ia_tool_used "$ia_tool_used" \
            --arg ia_usage_scenarios "$ia_usage_scenarios" \
            --arg productivity_reason "$productivity_reason" \
            --arg added_lines "$added_lines" \
            --arg removed_lines "$removed_lines" \
            --arg repository "$repository" \
            --arg merged_at_raw "$merged_at_json" \
            --arg first_commit_date_raw "$first_commit_date_json" \
            --argjson productivity_score "$jq_productivity_score" \
            '{
              pr_number: ($pr_number | tonumber),
              pr_title: $pr_title,
              pr_body: $pr_body[0],
              pr_status: $pr_status,
              developer_name: $developer_name,
              developer_email: $developer_email,
              created_at: $created_at,
              merged_at: ($merged_at_raw | fromjson),
              ia_tool_used: $ia_tool_used,
              ia_usage_scenarios: $ia_usage_scenarios,
              productivity_score: $productivity_score,
              productivity_reason: $productivity_reason,
              added_lines: ($added_lines | tonumber),
              removed_lines: ($removed_lines | tonumber),
              repository: $repository,
              first_commit_date: ($first_commit_date_raw | fromjson)
            }' > payload.json

          echo "Payload final:"
          cat payload.json

          curl -X POST \
            "$SUPABASE_URL/rest/v1/pr_metrics_v2?on_conflict=repository,pr_number" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=representation,resolution=merge-duplicates" \
            -d @payload.json

          echo '::endgroup::'
