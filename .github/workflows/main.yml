name: Enviar métricas de PR com IA

on:
  pull_request:
    types: [opened, reopened, synchronize, closed, labeled, unlabeled]

jobs:
  enviar-metricas:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extrair informações do PR
        id: extrair
        run: |
          echo '::group::Extraindo informações do PR'

          pr_number="${{ github.event.pull_request.number }}"
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"
          pr_status="${{ github.event.pull_request.state }}"
          created_at="${{ github.event.pull_request.created_at }}"
          merged_at="${{ github.event.pull_request.merged_at }}"
          repository="${{ github.repository }}"
          developer_name="${{ github.actor }}"
          developer_email="unknown@example.com"

          if echo "$pr_body" | grep -q '\- \[x\] Copilot'; then
            ia_tool_used="Copilot"
          elif echo "$pr_body" | grep -q '\- \[x\] Cursor'; then
            ia_tool_used="Cursor"
          elif echo "$pr_body" | grep -q '\- \[x\] Devin'; then
            ia_tool_used="Devin"
          elif echo "$pr_body" | grep -q '\- \[x\] Nenhuma'; then
            ia_tool_used="Nenhuma"
          elif echo "$pr_body" | grep -q '\- \[x\] Outra'; then
            ia_tool_used=$(echo "$pr_body" | grep '\- \[x\] Outra' | sed -E 's/.*Outra \(qual\)?:\s*//')
          else
            ia_tool_used="not_informed"
          fi

          time_saved_percentage="20%"
          time_saved_reason="Usando o Copilot, consegui acelerar a escrita do código."
          ia_usage_mode="Autocomplete"
          ia_usage_frequency="Cerca de metade do tempo"
          ia_usage_investment="Resolver vulnerabilidades"

          pr_files_url="https://api.github.com/repos/${repository}/pulls/${pr_number}/files"
          pr_files_json=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$pr_files_url")
          added_lines=$(echo "$pr_files_json" | jq '[.[] | .additions] | add // 0')
          removed_lines=$(echo "$pr_files_json" | jq '[.[] | .deletions] | add // 0')

          pr_commits_url="https://api.github.com/repos/${repository}/pulls/${pr_number}/commits"
          first_commit_date=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$pr_commits_url" | jq -r '.[0].commit.committer.date')

          echo "$pr_body" | jq -Rs '.' > body.txt

          merged_at_json="${merged_at:-null}"
          if [[ "$merged_at_json" != "null" ]]; then
            merged_at_json="\"$merged_at_json\""
          fi

          if [[ -z "$first_commit_date" || "$first_commit_date" == "null" ]]; then
            first_commit_date_json="null"
          else
            first_commit_date_json="\"$first_commit_date\""
          fi

          echo "pr_number=$pr_number" >> $GITHUB_ENV
          echo "pr_title=$pr_title" >> $GITHUB_ENV
          echo "pr_status=$pr_status" >> $GITHUB_ENV
          echo "developer_name=$developer_name" >> $GITHUB_ENV
          echo "developer_email=$developer_email" >> $GITHUB_ENV
          echo "created_at=$created_at" >> $GITHUB_ENV
          echo "merged_at_json=$merged_at_json" >> $GITHUB_ENV
          echo "ia_tool_used=$ia_tool_used" >> $GITHUB_ENV
          echo "time_saved_percentage=$time_saved_percentage" >> $GITHUB_ENV
          echo "time_saved_reason=$time_saved_reason" >> $GITHUB_ENV
          echo "ia_usage_mode=$ia_usage_mode" >> $GITHUB_ENV
          echo "ia_usage_frequency=$ia_usage_frequency" >> $GITHUB_ENV
          echo "ia_usage_investment=$ia_usage_investment" >> $GITHUB_ENV
          echo "added_lines=$added_lines" >> $GITHUB_ENV
          echo "removed_lines=$removed_lines" >> $GITHUB_ENV
          echo "repository=$repository" >> $GITHUB_ENV
          echo "first_commit_date_json=$first_commit_date_json" >> $GITHUB_ENV

          echo '::endgroup::'

      - name: Enviar dados ao Supabase
        run: |
          echo '::group::Enviando dados ao Supabase'

          jq -n \
            --arg pr_number "$pr_number" \
            --arg pr_title "$pr_title" \
            --slurpfile pr_body body.txt \
            --arg pr_status "$pr_status" \
            --arg developer_name "$developer_name" \
            --arg developer_email "$developer_email" \
            --arg created_at "$created_at" \
            --arg ia_tool_used "$ia_tool_used" \
            --arg time_saved_percentage "$time_saved_percentage" \
            --arg time_saved_reason "$time_saved_reason" \
            --arg ia_usage_mode "$ia_usage_mode" \
            --arg ia_usage_frequency "$ia_usage_frequency" \
            --arg ia_usage_investment "$ia_usage_investment" \
            --arg added_lines "$added_lines" \
            --arg removed_lines "$removed_lines" \
            --arg repository "$repository" \
            --arg merged_at_raw "$merged_at_json" \
            --arg first_commit_date_raw "$first_commit_date_json" \
            '{
              pr_number: ($pr_number | tonumber),
              pr_title: $pr_title,
              pr_body: $pr_body[0],
              pr_status: $pr_status,
              developer_name: $developer_name,
              developer_email: $developer_email,
              created_at: $created_at,
              merged_at: ($merged_at_raw | fromjson),
              ia_tool_used: $ia_tool_used,
              time_saved_percentage: $time_saved_percentage,
              time_saved_reason: $time_saved_reason,
              ia_usage_mode: $ia_usage_mode,
              ia_usage_frequency: $ia_usage_frequency,
              ia_usage_investment: $ia_usage_investment,
              added_lines: ($added_lines | tonumber),
              removed_lines: ($removed_lines | tonumber),
              repository: $repository,
              first_commit_date: ($first_commit_date_raw | fromjson)
            }' > payload.json

          cat payload.json

          curl -X POST \
            "$SUPABASE_URL/rest/v1/pr_metrics_v2?on_conflict=repository,pr_number" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=representation,resolution=merge-duplicates" \
            -d @payload.json

          echo '::endgroup::'
