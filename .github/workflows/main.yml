name: PR AI Usage Metrics

on:
  pull_request:
    types: [opened, reopened, synchronize, closed, labeled, unlabeled]

jobs:
  send_metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Extract PR Info
        id: pr_info
        run: |
          echo '::group::Extraindo informações do PR'

          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"  # Adicionando a extração do corpo do PR
          PR_STATUS="${{ github.event.pull_request.state }}"
          DEV_NAME="${{ github.event.pull_request.user.login }}"
          CREATED_AT="${{ github.event.pull_request.created_at }}"
          MERGED_AT="${{ github.event.pull_request.merged_at }}"
          REPO_NAME="${{ github.repository }}"
          DEV_EMAIL="unknown@example.com"

          # Coletando os dados dos campos novos
          IA_TOOL_USED="Copilot"  # Exemplo: Defina a ferramenta de IA (pode ser de uma lógica ou input adicional)
          TIME_SAVED_PERCENTAGE="20%"  # Exemplo de tempo economizado
          TIME_SAVED_REASON="Usando o Copilot, consegui acelerar a escrita do código."
          IA_USAGE_MODE="Autocomplete"  # Exemplo de modo de uso
          IA_USAGE_FREQUENCY="Cerca de metade do tempo"  # Exemplo de frequência
          IA_USAGE_INVESTMENT="Resolver vulnerabilidades"  # Exemplo de onde investiu o tempo economizado

          if [[ -z "$MERGED_AT" || "$MERGED_AT" == "null" ]]; then
            MERGED_AT_JSON=null
          else
            MERGED_AT_JSON="\"$MERGED_AT\""
          fi

          # Coletando linhas adicionadas e removidas
          PR_FILES_URL="${{ github.event.pull_request.url }}/files"
          PR_FILES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $PR_FILES_URL)
          ADDED_LINES=$(echo "$PR_FILES_JSON" | jq '[.[] | select(.status == "added") | .additions] | add')
          REMOVED_LINES=$(echo "$PR_FILES_JSON" | jq '[.[] | select(.status == "removed") | .deletions] | add')

          # Garantir que valores de linhas sejam tratados como null se não forem encontrados
          # Se não houver valor para linhas, atribuímos 'null' de maneira adequada
          ADDED_LINES=${ADDED_LINES:-null}
          REMOVED_LINES=${REMOVED_LINES:-null}

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_body=$PR_BODY" >> $GITHUB_OUTPUT
          echo "pr_status=$PR_STATUS" >> $GITHUB_OUTPUT
          echo "developer_name=$DEV_NAME" >> $GITHUB_OUTPUT
          echo "developer_email=$DEV_EMAIL" >> $GITHUB_OUTPUT
          echo "created_at=$CREATED_AT" >> $GITHUB_OUTPUT
          echo "merged_at=$MERGED_AT_JSON" >> $GITHUB_OUTPUT
          echo "ia_tool_used=$IA_TOOL_USED" >> $GITHUB_OUTPUT
          echo "time_saved_percentage=$TIME_SAVED_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "time_saved_reason=$TIME_SAVED_REASON" >> $GITHUB_OUTPUT
          echo "ia_usage_mode=$IA_USAGE_MODE" >> $GITHUB_OUTPUT
          echo "ia_usage_frequency=$IA_USAGE_FREQUENCY" >> $GITHUB_OUTPUT
          echo "ia_usage_investment=$IA_USAGE_INVESTMENT" >> $GITHUB_OUTPUT
          echo "added_lines=$ADDED_LINES" >> $GITHUB_OUTPUT
          echo "removed_lines=$REMOVED_LINES" >> $GITHUB_OUTPUT
          echo "repository=$REPO_NAME" >> $GITHUB_OUTPUT

          echo '::endgroup::'

      - name: Send Data to Supabase
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo '::group::Enviando dados ao Supabase'

          PR_NUMBER=${{ steps.pr_info.outputs.pr_number }}
          PR_TITLE="${{ steps.pr_info.outputs.pr_title }}"
          PR_BODY="${{ steps.pr_info.outputs.pr_body }}"  # Adicionando o corpo do PR
          PR_STATUS="${{ steps.pr_info.outputs.pr_status }}"
          DEVELOPER_NAME="${{ steps.pr_info.outputs.developer_name }}"
          DEVELOPER_EMAIL="${{ steps.pr_info.outputs.developer_email }}"
          CREATED_AT="${{ steps.pr_info.outputs.created_at }}"
          MERGED_AT_JSON=${{ steps.pr_info.outputs.merged_at }}
          IA_TOOL_USED="${{ steps.pr_info.outputs.ia_tool_used }}"
          TIME_SAVED_PERCENTAGE="${{ steps.pr_info.outputs.time_saved_percentage }}"
          TIME_SAVED_REASON="${{ steps.pr_info.outputs.time_saved_reason }}"
          IA_USAGE_MODE="${{ steps.pr_info.outputs.ia_usage_mode }}"
          IA_USAGE_FREQUENCY="${{ steps.pr_info.outputs.ia_usage_frequency }}"
          IA_USAGE_INVESTMENT="${{ steps.pr_info.outputs.ia_usage_investment }}"
          ADDED_LINES="${{ steps.pr_info.outputs.added_lines }}"
          REMOVED_LINES="${{ steps.pr_info.outputs.removed_lines }}"
          REPOSITORY="${{ steps.pr_info.outputs.repository }}"

          jq -n \
            --arg pr_number "$PR_NUMBER" \
            --arg pr_title "$PR_TITLE" \
            --arg pr_body "$PR_BODY" \
            --arg pr_status "$PR_STATUS" \
            --arg developer_name "$DEVELOPER_NAME" \
            --arg developer_email "$DEVELOPER_EMAIL" \
            --arg created_at "$CREATED_AT" \
            --argjson merged_at "$MERGED_AT_JSON" \
            --arg ia_tool_used "$IA_TOOL_USED" \
            --arg time_saved_percentage "$TIME_SAVED_PERCENTAGE" \
            --arg time_saved_reason "$TIME_SAVED_REASON" \
            --arg ia_usage_mode "$IA_USAGE_MODE" \
            --arg ia_usage_frequency "$IA_USAGE_FREQUENCY" \
            --arg ia_usage_investment "$IA_USAGE_INVESTMENT" \
            --arg added_lines "$ADDED_LINES" \
            --arg removed_lines "$REMOVED_LINES" \
            --arg repository "$REPOSITORY" \
            '{
              pr_number: ($pr_number | tonumber),
              pr_title: $pr_title,
              pr_body: $pr_body,
              pr_status: $pr_status,
              developer_name: $developer_name,
              developer_email: $developer_email,
              created_at: $created_at,
              merged_at: $merged_at,
              ia_tool_used: $ia_tool_used,
              time_saved_percentage: $time_saved_percentage,
              time_saved_reason: $time_saved_reason,
              ia_usage_mode: $ia_usage_mode,
              ia_usage_frequency: $ia_usage_frequency,
              ia_usage_investment: $ia_usage_investment,
              added_lines: $added_lines,
              removed_lines: $removed_lines,
              repository: $repository
            }' > payload.json

          cat payload.json

          curl -X POST \
            "${SUPABASE_URL}/rest/v1/pr_metrics_v2?on_conflict=repository,pr_number" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=representation,resolution=merge-duplicates" \
            -d @payload.json

          echo '::endgroup::'
